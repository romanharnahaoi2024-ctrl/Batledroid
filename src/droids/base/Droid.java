package droids.base;

import droids.battle.BattleLog;
import droids.battle.Arena;
import util.ConsoleColors;

import java.io.Serializable;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

public abstract class Droid implements Serializable {
    private static final long serialVersionUID = 2L;

    protected String name;
    protected int health;
    protected int maxHealth;
    protected int damage;
    protected boolean blocked = false;     // –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π (–ø—Ä–æ–ø—É—Å–∫–∞—î –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ö—ñ–¥)
    protected int shieldAccum = 0;         // –Ω–∞–∫–æ–ø–∏—á–µ–Ω–∏–π —â–∏—Ç (—á–µ—Ä–µ–∑ Tank), –±–µ–∑–ø–µ—á–Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∞ max HP
    protected boolean tookDamageThisTurn = false;

    public Droid(String name, int maxHealth, int damage) {
        this.name = name;
        this.maxHealth = maxHealth;
        this.health = maxHealth;
        this.damage = damage;
    }

    public String getName() { return name; }
    public int getHealth() { return health; }
    public int getMaxHealth() { return maxHealth; }
    public int getDamage() { return damage; }
    public boolean isBlocked() { return blocked; }
    public void setBlocked(boolean b) { blocked = b; }

    public boolean isAlive() { return health > 0; }

    // –±–∞–∑–æ–≤–∞ –∞—Ç–∞–∫–∞ ‚Äî –º–æ–∂–µ –±—É—Ç–∏ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∞ –≤ –ø—ñ–¥–∫–ª–∞—Å–∞—Ö (Attacker —Ä–æ–±–∏—Ç—å –∫—Ä–∏—Ç)
    public int attackValue() {
        return damage;
    }

    // –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —É—à–∫–æ–¥–∂–µ–Ω–Ω—è (–ø–æ–∑–Ω–∞—á–∞—î, —â–æ –¥—Ä–æ—ó–¥ –±—Ä–∞–≤ —É—à–∫–æ–¥–∂–µ–Ω–Ω—è)
    public void takeDamage(int dmg) {
        if (dmg <= 0) return;
        tookDamageThisTurn = true;
        health -= dmg;
        if (health < 0) health = 0;
    }

    // –ª—ñ–∫—É–≤–∞–Ω–Ω—è (–Ω–µ –±—ñ–ª—å—à–µ maxHealth + shieldAccum)
    public void heal(int amount) {
        if (amount <= 0) return;
        int effectiveMax = maxHealth + shieldAccum;
        health += amount;
        if (health > effectiveMax) health = effectiveMax;
    }

    // Tank –¥–æ–¥–∞—î —â–∏—Ç (–Ω–∞–∫–æ–ø–∏—á—É–≤–∞–ª—å–Ω–∏–π)
    public void addShield(int amount) {
        if (amount <= 0) return;
        shieldAccum += amount;
        maxHealth += amount;
        health += amount; // –æ–¥—Ä–∞–∑—É –¥–æ–¥–∞—Ç–∫–æ–≤–µ HP
    }

    public void resetTurnFlags() {
        tookDamageThisTurn = false;
    }

    // –ü–æ–ª—ñ–º–æ—Ä—Ñ–Ω–∏–π –º–µ—Ç–æ–¥ ‚Äî –∫–æ–∂–µ–Ω —Ç–∏–ø —Ä–µ–∞–ª—ñ–∑—É—î –≤–ª–∞—Å–Ω—É –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å
    // allies/enemies –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —è–∫ —Å–ø–∏—Å–∫–∏ (–Ω–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ Scanner/Log)
    public abstract void useAbility(List<Droid> allies, List<Droid> enemies,
                                    Scanner sc, boolean isPlayer, BattleLog log, Arena arena);

    // –¥–æ–ø–æ–º—ñ–∂–Ω–∏–π –º–µ—Ç–æ–¥ –≤–∏–±–æ—Ä—É —Ü—ñ–ª—ñ (–¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –¥–ª—è AI)
    protected Droid chooseTarget(List<Droid> list, Scanner sc, boolean isPlayer) {
        // –≤—Ä–∞—Ö–æ–≤—É—î —Ç—ñ–ª—å–∫–∏ –∂–∏–≤–∏—Ö –¥—Ä–æ—ó–¥—ñ–≤
        list.removeIf(d -> d != null && !d.isAlive());
        if (list.isEmpty()) return null;
        if (!isPlayer) {
            Random r = new Random();
            return list.get(r.nextInt(list.size()));
        }

        // –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
        while (true) {
            System.out.println("–û–±–µ—Ä—ñ—Ç—å —Ü—ñ–ª—å:");
            for (int i = 0; i < list.size(); i++) {
                System.out.println((i + 1) + " - " + list.get(i).toString());
            }
            String line = sc.nextLine().trim();
            try {
                int idx = Integer.parseInt(line) - 1;
                if (idx >= 0 && idx < list.size()) return list.get(idx);
            } catch (Exception ignored) {}
            System.out.println("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–≤—ñ–¥ ‚Äî —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
        }
    }

    @Override
    public String toString() {
        String s = name + " [HP: " + health + "/" + maxHealth;
        if (shieldAccum > 0) s += " (shield+" + shieldAccum + ")";
        s += ", DMG: " + damage + "]";
        if (blocked) s += " " + ConsoleColors.YELLOW + "üîí" + ConsoleColors.RESET;
        return s;
    }
}
